openapi: 3.0.3
info:
  title: WebRTC Registration Service API
  description: |-
    ## 1. Introduction
    This API provide REST API for clients to manage Registration and Connectivity
    (RACM) towards network operator (IMS Network).

    The network requires that all endpoints identify the subscriber and create a
    session before enable or activate any service. In order to create audio and
    video sessions, you device (or endpoint) need to have a valid registration on
    the network. This API provide that feature, and allow users to create audio and
    video sessions using the telco network.

    All telco services are based on subscriptions, this API allows the user to
    create a session where you can consume the audio/video part of the telco services.

    **Use cases to cover:**
      - Functional:
        - Ability to create Registration sessions on the network, this grants
          access to create new audio and video sessions.
        - Ability to update or remove Registration sessions on the network
      - An additional subscription to webrtc-events API is required to receive
        incoming calls.

    ## 2. Relevant terms and definitions

    - **RACM**: Acronym of Registration and Connectivity Management. In the realm
      of mobile networks, Registration Management (RM) serves as a crucial process
      for establishing and maintaining user equipment (UE) connectivity within the
      network. It ensures that UEs (your smartphone or mobile device) are properly
      identified, authenticated, and authorized to access network services.
    - **racmSession** A registration session. A valid client running on a valid
      device, with permission to use the network capabilities to create and receive
      calls (audio/video sessions).
    - **racmSessionId**: Unique identifier of an WebRTC endpoint **registration**.
      Retrieved using the `webrtc-registration` API
    - **deviceId**: A unique identifier for the physical device where a WebRTC
      session is initiated. It is provided by the WebRTC application, it remains
      consistent across multiple installations or logins on the same device. Its
      primary function is to ensure that only one WebRTC session (**racmSession**)
      is active per device at a time, enabling the gateway to clean up any stale
      sessions if a new session is initiated on the same device.
    - **clientId**: A unique identifier, assigned by the network, for each client
      instance or **racmSession**. It is best practice for the gateway to issue a new
      clientId for each login or session. This approach helps the gateway maintain
      clear indexing or mapping for quicker processing and simplifies troubleshooting
      by clearly distinguishing one session from another.
    - **WebRTC**: WebRTC is a free and open-source project providing web browsers
      and mobile applications with real-time communication via application programming
      interfaces. It allows audio and video communication and streaming to work
      inside web pages by allowing direct peer-to-peer communication
    - **SDP**: Acronym for Session Description Protocol. The SDP is a format for
      describing multimedia communication sessions for the purposes of announcement
      and invitation.

    ## 3. API functionality

    This API allows to create device registrations. These, identified by a unique
    `racmSessionId` can be updated and terminated via this API and its methods.
    - **POST**: Create a new device registration using a valid authorization token.
    - **PUT**: Update a device registration via its unique `racmSessionId`
    - **DELETE**: Finish an existing device registration via its unique `racmSessionId`
    To receive server-side updates about new voice-video sessions, you need to
    use `webrtc-events` API.

    The main concept of the API is pretty straightforward: a subscriber needs a
    session to create calls, so you will need a subscription on your device before
    attempt any audio/video call.

    Once you create a session, you can:
    - Use `webrtc-events` API to create a subscription and receive incoming calls.
    - Use `webrtc-call-handling` API to create a audio/video session and create
      an outgoing call.

    Check for extra details on each of these APIs already present on the WebRTC
    repository.

    ## 4. Authorization and authentication

    The "Camara Security and Interoperability Profile" provides details of how an
    API consumer requests an access token. Please refer to Identity and Consent
    Management (https://github.com/camaraproject/IdentityAndConsentManagement/)
    for the released version of the profile.

    The specific authorization flows to be used will be agreed upon during the
    onboarding process, happening between the API consumer and the API provider,
    taking into account the declared purpose for accessing the API, whilst also
    being subject to the prevailing legal framework dictated by local legislation.

    In cases where personal data is processed by the API and users can exercise
    their rights through mechanisms such as opt-in and/or opt-out, the use of
    three-legged access tokens is mandatory. This ensures that the API remains
    in compliance with privacy regulations, upholding the principles of
    transparency and user-centric privacy-by-design.

  contact:
    email: contact@domain.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: vwip
  x-camara-commonalities: 0.5
servers:
  - url: '{apiRoot}/webrtc-registration/vwip'
    description: APIs to manage Client Registration and Connection
    variables:
      apiRoot:
        description: API Root
        default: http://localhost:9091
tags:
  - name: Registration and Connection Management
    description: APIs for Client to Register into MNO's IMS Network
paths:
  /sessions:
    post:
      tags:
        - RACM
      summary: Create RACM Session
      description: Create RACM Session
      parameters:
        - $ref: '#/components/parameters/hdrTransactionId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RacmRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RacmResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
              examples:
                400emergencyAdressMissing:
                  summary: Emergency address missing
                  value:
                    status: 400
                    code: EMERGENCY_ADDRESS_MISSING
                    message: Emergency address missing
                400genericResponse:
                  summary: Generic Response
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: Schema validation failed at  ...
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
              examples:
                403maxRegistrationUser:
                  summary: Max registration per user
                  value:
                    status: 403
                    code: MAX_REGISTRATION_PER_USER
                    message: 'The maximum number of service registrations per user has been reached'
                403maxRegistrationMSISDN:
                  summary: Max registration per MSISDN
                  value:
                    status: 403
                    code: MAX_REGISTRATION_PER_MSISDN
                    message: 'The maximum number of service registrations per MSISDN has been reached'
                403maxDevicesUser:
                  summary: Max devices per user
                  value:
                    status: 403
                    code: MAX_DEVICES_PER_USER
                    message: 'The maximum number of device instances per user has been reached'
                403genericResponse:
                  summary: Generic Response
                  value:
                    status: 403
                    code: PERMISSION_DENIED
                    message: 'Operation not allowed: ...'
      security:
        - BearerAuth:
            - read
            - write
  /sessions/{racmSessionId}:
    put:
      tags:
        - RACM
      summary: For sharing new AccessToken with WebRTC GW, the AccessToken is expected to be received from the Auth server.
      description: '**The client shall use the racmSessionId to construct the API path.**'
      parameters:
        - $ref: '#/components/parameters/hdrTransactionId'
        - $ref: '#/components/parameters/hdrClientId'
        - $ref: '#/components/parameters/pathParamRacmSessionId'
      responses:
        '200':
          description: No Content
      security:
        - BearerAuth:
            - read
            - write
    delete:
      tags:
        - RACM
      summary: Delete Registration Session.
      description: '**The client shall use the racmSessionId to construct the API path.**'
      parameters:
        - $ref: '#/components/parameters/hdrTransactionId'
        - $ref: '#/components/parameters/hdrClientId'
        - $ref: '#/components/parameters/pathParamRacmSessionId'
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/NotFound404'
      security:
        - BearerAuth:
            - read
            - write
components:
  schemas:
    RacmRequest:
      type: object
      properties:
        deviceId:
          type: string
          description: The device-id of the client in UUID format.
    RacmResponse:
      type: object
      properties:
        connectionInformation:
          $ref: '#/components/schemas/ConnectionInformation'
        regInfo:
          type: array
          items:
            $ref: '#/components/schemas/RegistrationInformation'
        racmSessionId:
          type: string
          description: The RACM session ID created by WebRTC Gateway. Clients must utilize this ID to construct the API path.
    ConnectionInformation:
      type: object
      properties:
        clientId:
          type: string
          description: The unique id assigned by WebRTC GW for identifying the association of device with WebRTC GW. The clients are required to include this value in clientId header.
    RegistrationStatus:
      type: string
      enum:
        - Registered
    RegistrationInformation:
      type: object
      properties:
        msisdn:
          type: string
        regStatus:
          $ref: '#/components/schemas/RegistrationStatus'

    ErrorInfo:
      type: object
      properties:
        status:
          type: integer
          description: HTTP status code returned along with this error response
        code:
          type: string
          description: Code given to this error
        message:
          type: string
          description: Detailed error description
      required:
        - status
        - code
        - message
  parameters:
    hdrClientId:
      name: clientId
      in: header
      description: The Client ID assigned by WebRTC GW
      required: true
      style: simple
      explode: false
      schema:
        type: string
    hdrTransactionId:
      name: transactionId
      in: header
      description: The Transaction ID associated with the request
      required: true
      style: simple
      explode: false
      schema:
        type: string
    pathParamRacmSessionId:
      name: racmSessionId
      in: path
      description: The sessionId assigned by the RACM service
      required: true
      style: simple
      explode: false
      schema:
        type: string
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  responses:
    Generic400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 400
            code: INVALID_ARGUMENT
            message: Schema validation failed at  ...
    Generic401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 401
            code: UNAUTHENTICATED
            message: 'Authorization failed: ...'
    Generic403:
      description: Device not authorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 403
            code: PERMISSION_DENIED
            message: 'Operation not allowed: ...'
    NotFound404:
      description: Session Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 404
            code: NOT_FOUND
            message: Unable to find the session with the provided Id parameters
    Generic500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 500
            code: INTERNAL
            message: 'Internal server error: ...'
    Generic501:
      description: Not Implemented
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 501
            code: NOT_IMPLEMENTED
            message: Service not implemented for the specified user device
    Generic503:
      description: Service unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 503
            code: UNAVAILABLE
            message: Service unavailable
