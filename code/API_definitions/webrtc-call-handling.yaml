openapi: 3.0.3
info:
  title: WebRTC Call Handling API
  description: |-
    ## 1. Introduction

    This API provides REST API for clients to manage live audio and video sessions
    towards the operator's network (IMS network).

    To handle audio/video sessions, what we usually known as *calls*, the network
    requires to identify both involved parties: caller, the origin, and the callee,
    the destination. Once identified the involved communication endpoints, then
    it is required to define *how* to send media from one endpoint to the other.

    The first point, *identify the endpoints* is solved in CAMARA via direct API
    parameters on the API request. The later, *negotiate how to connect*, is solved
    sharing SDP information between peers.

    In that point, the WebRTC technology is used to simplify the access to the
    media, and get a simple and well-known protocol to solve the media transmission
    requirements.

    Let's dig on it on section 3: API functionality

    **Use cases to cover:**
      - Functional:
        - Ability to create audio and video sessions on the network, this grants
          ability to reach any phone number on the public network using your telco
          provider rights.
        - Ability to retrieve any session, to recover for a network disconnection
          or to check current status for any reason.
        - Ability to upgrade to video, change sending audio/video parameters, or
          notify the network about any modification on your side of the calls.
        - Ability to hangup the call. Stop the transmission, and delete your audio
          and video session.
      - An additional subscription to webrtc-events API is required to receive
        incoming events from network side (ex. remote hangup event).

    ## 2. Relevant terms and definitions

    - **media session**: An exchange of media between devices.
      Typical example of session is a "single one-to-one call".
    - **mediaSessionId**: Unique identifier of a **media session** using
      webrtc-call-handling API. Retrieved using the `webrtc-call-handling` API
    - **deviceId**: A unique identifier for the physical device where a media
      session is initiated. It is provided by the WebRTC application, it remains
      consistent across multiple installations or logins on the same device. Its
      primary function is to ensure that only one WebRTC session (**registration**)
      is active per device at a time, enabling the gateway to clean up any stale
      sessions if a new session is initiated on the same device.
    - **registration**: A device status in which the device is properly
      identified and recognized as reachable by the server side of the network.
    - **registrationId**: Unique identifier of an device **registration**.
      Retrieved using the `webrtc-registration` API
    - **x-correlator**: Unique ID associated to the REST _transaction_ created by the
      REST client. It is used to correlate requests and responses and help debugging.
    - **clientCorrelator**: A unique correlation ID that the client can use to tag
      a particular resource representation during a request to create a resource on
      the server. This allows the client to ***recover*** from communication failures
      during resource creation and therefore avoids re-sending the message in such
      situations.
    - **WebRTC**: WebRTC is a free and open-source project providing web browsers
      and mobile applications with real-time communication via application programming
      interfaces. It allows audio and video communication and streaming to work
      inside web pages by allowing direct peer-to-peer communication
    - **SDP**: Acronym for Session Description Protocol. The SDP is a format for
      describing multimedia communication sessions for the purposes of announcement
      and invitation.
    - **WrtcSDPDescriptor**: Schema to include inside a JSON, a SDP body. You can
      obtain an SDP for WebRTC calling using the WebRTC API provided by the browser
      or any other media library.

    ## 3. API functionality

    This API allows to create 1-1 voice and video sessions. These, identified by a
    unique `mediaSessionId` can be recovered, updated and terminated via this API
    and its methods.
    - **POST**: Create a new session using a valid `registrationId` from registration API
    - **GET**: Recover an existing session via its unique `mediaSessionId`
    - **DELETE**: Finish an existing session via its unique `mediaSessionId`
    - **PUT**: Update the status of a session via its unique `mediaSessionId`

    To receive server-side updates about the session establishment process, you
    must use `webrtc-events` API.

    ### 3.1. Creating a call

    To call someone, you need, previously a valid registration on the network.
    You must check the webrtc-registration API to retrieve a valid registration
    on the network that allows you to send calls (IMS registration).

    Once this is completed, you can consume the POST /sessions/ endpoint to call
    to a remote destination.

    ```
    POST /webrtc-call-handling/v0.2/sessions
    {
      "originatorAddress": "tel:+17085852753",
      "receiverAddress": "tel:+17085854000",
      "clientCorrelator": "fda6e26d-e7c8-4596-870c-c083c0d39b2c"
    }
    ```

    This will create a call, but without local media you will have a problem, or
    maybe the network will reject your call. You need to add a local SDP offer.

    > **The WebRTC SDP local candidate**
    >
    > What is usually done, before attempt to create a call, is to solve the SDP local
    description. This is, how you are going to send the media. To explain it briefly,
    browsers offer the
    [WebRTC API](https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API) that
    include `getUserMedia()` and `RTCPeerConnection` interfaces that will simplify
    the process.
    >
    > In summary, we need to obtain the media, create the `RTCPeerConnection`
    and use it's SDP on our CAMARA webrtc-call-handling API as the offer. There
    is extra information about this concept on the SupportingDocuments folder.

    Once you retrieve you local SDP offer, you modify your session including it,
    or maybe you prefer to solve the local candidate before attempt the call, in
    that case, you will include your local offer on the audio/video session creation.

    ```
    POST /webrtc-call-handling/v0.2/sessions
    {
        "originatorAddress": "tel:+17085852753",
        "receiverAddress": "tel:+17085854000",
        "offer": {
            "sdp": "v=0\r\no=- 4808447918291752114 2 IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\na=group:BUNDLE 0\r\na=extmap-allow-mixed\r\na=msid-semantic: WMS 0893fb9b-23c2-4571-a26d-13cb0f4fed9f\r\nm=audio 13765 UDP/TLS/RTP/SAVPF 111 63 9 0 8 13 110 126\r\nc=IN IP4 123.123.123.123\r\na=rtcp:9 IN IP4 0.0.0.0\r\na=candidate:959305279 1 udp 2113937151 26e1f6e6-f0cb-47fb-a1b4-afa62b6a7f29.local 50745 typ host generation 0 network-cost 999\r\na=candidate:3375440286 1 udp 1677729535 123.123.123.123 13765 typ srflx raddr 0.0.0.0 rport 0 generation 0 network-cost 999\r\na=ice-ufrag:YoUo\r\na=ice-pwd:kK5J6IAgiKFDFU+2rC+FyZal\r\na=ice-options:trickle\r\na=fingerprint:sha-256 CF:56:D8:57:9B:68:B2:1C:F6:ED:6C:CO:02:7C:96:C2:88:A3:C2:38:AD:A2:CA:F5:0D:47:BB:81:74:7B:75:17\r\na=setup:actpass\r\na=mid:0\r\na=extmap:1 urn:ietf:params:rtp-hdrext:ssrc-audio-level\r\na=extmap:2 http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time\r\na=extmap:3 http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01\r\na=extmap:4 urn:ietf:params:rtp-hdrext:sdes:mid\r\na=sendrecv\r\na=msid:0893fb9b-23c2-4571-a26d-13cb0f4fed9f 2daf5a1e-d3bf-4d4e-95db-b8623fce4176\r\na=rtcp-mux\r\na=rtcp-rsize\r\na=rtpmap:111 opus/48000/2\r\na=rtcp-fb:111 transport-cc\r\na=fmtp:111 minptime=10;useinbandfec=1\r\na=rtpmap:63 red/48000/2\r\na=fmtp:63 111/111\r\na=rtpmap:9 G722/8000\r\na=rtpmap:0 PCMU/8000\r\na=rtpmap:8 PCMA/8000\r\na=rtpmap:13 CN/8000\r\na=rtpmap:110 telephone-event/48000\r\na=rtpmap:126 telephone-event/8000\r\na=ssrc:932268938 cname:mzxQSFSDV3JpfIJY\r\na=ssrc:932268938 msid:0893fb9b-23c2-4571-a26d-13ccof4fed9f 2daf5a1e-d3bf-4d4e-95db-b8623fce4176\r\n"
            },
        "clientCorrelator": "fda6e26d-e7c8-4596-870c-c083c0d39b2c"
    }
    ```

    Following this point, your call is progressing and the network will inform
    about extra information required and connection status via de the
    webrtc-events API.

    Check webrtc-events API inline documentation and supporting documents
    for further information.

    ### 3.2. Hanging up a call

    When you have a voice/video session in progress, you can decide to finish the
    call, to do so, simply execute a DELETE command over the endpoint using the
    `mediaSessionId` obtained on call creation.

    This action will trigger all necessary action on the network side to properly
    hangup and drop the call.

    ### 3.3. Picking up a call

    Using the `webrtc-events` API, you can receive events from the network, these
    events could include the `session-invitation` event. This means that someone
    is calling you.

    To *hook off*, we need to retrieve the session based on the `mediaSessionId`
    using the GET command, afterwards, you can present to the user some
    confirmation option to accept the call.

    Final step is to include a local offer. We already seen at 3.1 that a local
    SDP is required, in this case, we will use the PUT command to modify the
    audio/video session and include the information about the responding device.

    Let's say that we are responding this session `0AEE1B58BAEEDA3EABA42B32EBB3DFE0DEAD`:
    ```
    PUT /webrtc-call-handling/v0.2/sessions/0AEE1B58BAEEDA3EABA42B32EBB3DFE0DEAD
    {
        "status": "InProgress",
        "answer": {
            "sdp": "v=0\r\no=- 4808447918291752114 2 IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\na=group:BUNDLE 0\r\na=extmap-allow-mixed\r\na=msid-semantic: WMS 0893fb9b-23c2-4571-a26d-13cb0f4fed9f\r\nm=audio 13765 UDP/TLS/RTP/SAVPF 111 63 9 0 8 13 110 126\r\nc=IN IP4 123.123.123.123\r\na=rtcp:9 IN IP4 0.0.0.0\r\na=candidate:959305279 1 udp 2113937151 26e1f6e6-f0cb-47fb-a1b4-afa62b6a7f29.local 50745 typ host generation 0 network-cost 999\r\na=candidate:3375440286 1 udp 1677729535 123.123.123.123 13765 typ srflx raddr 0.0.0.0 rport 0 generation 0 network-cost 999\r\na=ice-ufrag:YoUo\r\na=ice-pwd:kK5J6IAgiKFDFU+2rC+FyZal\r\na=ice-options:trickle\r\na=fingerprint:sha-256 CF:56:D8:57:9B:68:B2:1C:F6:ED:6C:CO:02:7C:96:C2:88:A3:C2:38:AD:A2:CA:F5:0D:47:BB:81:74:7B:75:17\r\na=setup:actpass\r\na=mid:0\r\na=extmap:1 urn:ietf:params:rtp-hdrext:ssrc-audio-level\r\na=extmap:2 http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time\r\na=extmap:3 http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01\r\na=extmap:4 urn:ietf:params:rtp-hdrext:sdes:mid\r\na=sendrecv\r\na=msid:0893fb9b-23c2-4571-a26d-13cb0f4fed9f 2daf5a1e-d3bf-4d4e-95db-b8623fce4176\r\na=rtcp-mux\r\na=rtcp-rsize\r\na=rtpmap:111 opus/48000/2\r\na=rtcp-fb:111 transport-cc\r\na=fmtp:111 minptime=10;useinbandfec=1\r\na=rtpmap:63 red/48000/2\r\na=fmtp:63 111/111\r\na=rtpmap:9 G722/8000\r\na=rtpmap:0 PCMU/8000\r\na=rtpmap:8 PCMA/8000\r\na=rtpmap:13 CN/8000\r\na=rtpmap:110 telephone-event/48000\r\na=rtpmap:126 telephone-event/8000\r\na=ssrc:932268938 cname:mzxQSFSDV3JpfIJY\r\na=ssrc:932268938 msid:0893fb9b-23c2-4571-a26d-13ccof4fed9f 2daf5a1e-d3bf-4d4e-95db-b8623fce4176\r\n"
            }
    }
    ```

    ## 4. Authorization and authentication

    The "Camara Security and Interoperability Profile" provides details of how an
    API consumer requests an access token. Please refer to Identity and Consent
    Management (https://github.com/camaraproject/IdentityAndConsentManagement/)
    for the released version of the profile.

    The specific authorization flows to be used will be agreed upon during the
    onboarding process, happening between the API consumer and the API provider,
    taking into account the declared purpose for accessing the API, whilst also
    being subject to the prevailing legal framework dictated by local legislation.

    In cases where personal data is processed by the API and users can exercise
    their rights through mechanisms such as opt-in and/or opt-out, the use of
    three-legged access tokens is mandatory. This ensures that the API remains
    in compliance with privacy regulations, upholding the principles of
    transparency and user-centric privacy-by-design.

  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 0.2.0
  x-camara-commonalities: 0.5

externalDocs:
  description: Product documentation at CAMARA
  url: https://github.com/camaraproject/WebRTC
servers:
  - url: '{apiRoot}/webrtc-call-handling/v0.2'
    variables:
      apiRoot:
        description: API root
        default: 'http://localhost:9091'
tags:
  - name: Call handling
    description: Operations to manage voice video sessions (calls)
paths:
  /sessions:
    post:
      tags:
        - Call handling
      summary: Creates voice and/or video session
      description: Creates a voice and/or video session
      operationId: createSession
      parameters:
        - $ref: "#/components/parameters/x-correlator"
        - $ref: '#/components/parameters/hdrRegistrationId'
      security:
        - openId:
            - webrtc-call-handling:sessions:create
      requestBody:
        description: Provide the information required for session creation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaSessionInformation'
            examples:
              Media session request:
                $ref: '#/components/examples/exampleMediaSessionRequest'
      responses:
        '201':
          description: Created
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaSessionInformation'
              examples:
                SessionCreated:
                  $ref: '#/components/examples/exampleMediaSessionResponse'
        '400':
          $ref: '#/components/responses/Generic400'
        '401':
          $ref: "#/components/responses/Generic401"
        '403':
          $ref: '#/components/responses/Generic403'
  /sessions/{mediaSessionId}:
    get:
      tags:
        - Call handling
      summary: Get the media session information
      description: |
        Get the media Session description based on `mediaSessionId`.

        ** The client shall construct the API path using the `mediaSessionId` supplied
        in the session creation response (origination) or in the invitation notification
        (termination). **
      operationId: getSessionDetailsById
      parameters:
        - $ref: '#/components/parameters/x-correlator'
        - $ref: '#/components/parameters/pathParamMediaSessionId'
      security:
        - openId:
            - webrtc-call-handling:sessions:read
      responses:
        '200':
          description: A session information
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaSessionInformation'
        '401':
          $ref: '#/components/responses/Generic401'
        '403':
          $ref: '#/components/responses/Generic403'
        '404':
          $ref: '#/components/responses/Generic404'
    delete:
      tags:
        - Call handling
      summary: Cancel or Terminate the media session
      description: >
        Cancel a 1-1 media session (as originator),

        Decline a 1-1 media session (as receiver),

        Terminate a 1-1 an ongoing media session

        ** The client shall construct the API path using the mediaSessionId supplied in the session creation response (origination) or in the invitation notification (termination). **'
      operationId: deleteSessionById
      parameters:
        - $ref: '#/components/parameters/x-correlator'
        - $ref: '#/components/parameters/pathParamMediaSessionId'
      security:
        - openId:
            - webrtc-call-handling:sessions:delete
      responses:
        '204':
          description: Session deleted
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
        '401':
          $ref: '#/components/responses/Generic401'
        '403':
          $ref: '#/components/responses/Generic403'
        '404':
          $ref: '#/components/responses/Generic404'
  /sessions/{mediaSessionId}/status:
    put:
      tags:
        - Call handling
      summary: Update the status of the media session
      description: |
        Update the status of the media session, this may include updating SDP media

        The API consumer shall construct the API path using the `mediaSessionId` supplied in the session creation response (origination) or in the invitation notification (termination).
      operationId: updateSessionStatus
      parameters:
        - $ref: '#/components/parameters/x-correlator'
        - $ref: '#/components/parameters/pathParamMediaSessionId'
      security:
        - openId:
            - webrtc-call-handling:sessions:write
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaSessionInformation'
            examples:
              Update inProgress (update media candidates):
                $ref: '#/components/examples/exampleSessionStatus183InProgress'
              Update ringing (device user endpoint is ringing):
                $ref: '#/components/examples/exampleSessionStatus180Ringing'
              Update connected (call is established):
                $ref: '#/components/examples/exampleSessionStatus200Connected'
              Update hold (call has been placed on call waiting mode):
                $ref: '#/components/examples/exampleSessionStatusHold'
              Update resume (call has been resumed):
                $ref: '#/components/examples/exampleSessionStatusResume'
      responses:
        '200':
          description: |
            Updated the session status (with SDP data).
            It will confirm the status defined on the PUT operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaSessionInformation'
              examples:
                Update inProgress (update media candidates):
                  $ref: '#/components/examples/exampleSessionStatus183InProgress'
                Update ringing (device user endpoint is ringing):
                  $ref: '#/components/examples/exampleSessionStatus180Ringing'
                Update connected (call is established):
                  $ref: '#/components/examples/exampleSessionStatus200Connected'
                Update hold (call has been placed on call waiting mode):
                  $ref: '#/components/examples/exampleSessionStatusHold'
                Update resume (call has been resumed):
                  $ref: '#/components/examples/exampleSessionStatusResume'
        '204':
          description: Updated the session status (no content)
        '401':
          $ref: '#/components/responses/Generic401'
        '403':
          $ref: '#/components/responses/Generic403'
        '404':
          $ref: '#/components/responses/Generic404'
components:
  securitySchemes:
    openId:
      type: openIdConnect
      openIdConnectUrl: https://example.com/.well-known/openid-configuration
  headers:
    x-correlator:
      description: Correlation id for the different services
      schema:
        type: string
        pattern: ^[a-zA-Z0-9-]{0,55}$
  parameters:
    hdrRegistrationId:
      name: registrationId
      in: header
      description: The device registration identifier assigned by the network
      required: true
      style: simple
      explode: false
      schema:
        type: string
    pathParamMediaSessionId:
      name: mediaSessionId
      in: path
      description: The sessionId assigned by the network for the media session
      required: true
      style: simple
      explode: false
      schema:
        type: string
    x-correlator:
      name: x-correlator
      in: header
      description: Correlation id for the different services
      schema:
        type: string
        pattern: ^[a-zA-Z0-9-]{0,55}$
        example: "b4333c46-49c0-4f62-80d7-f0ef930f1c46"
  schemas:
    MediaSessionInformation:
      type: object
      properties:
        originatorAddress:
          $ref: '#/components/schemas/Address'
        originatorName:
          type: string
          description: Friendly name of the call originator
          example: 'Alice'
        receiverAddress:
          $ref: '#/components/schemas/Address'
        receiverName:
          type: string
          description: Friendly name of the call terminator
          example: 'Bob'
        status:
          $ref: '#/components/schemas/SessionStatus'
        offer:
          $ref: '#/components/schemas/WrtcSDPDescriptor'
        answer:
          $ref: '#/components/schemas/WrtcSDPDescriptor'
        clientCorrelator:
          type: string
          description: >-
            A correlator that the client can use to tag this particular resource representation
            during a request to create a resource on the server. Note - This allows the client to
            recover from communication failures during resource creation and therefore avoids
            re-sending the message in such situations. In case the element is present, the WebRTC
            GW shall not alter its value, and shall provide it as part of the representation of
            this resource.
          example: 1c1c3e8d-8f9d-4167-ac78-929ba0b21051
        mediaSessionId:
          type: string
          description: >-
            The media session ID created by the network. The mediaSessionId shall not be
            included in POST requests by the client, but must be included in the notifications
            from the network to the client device.
          example: 0AEE1B58BAEEDA3EABA42B32EBB3DFE07E9CFF402EAF9EED8EF
        callObjectRef:
          type: string
          description: The reference to the call object
          example: 84c742ba-a117-4e38-a089-1545073ce15c
        serverCorrelator:
          type: string
          description: >-
            A correlator that the server instructs the client to use for end to end correlation.
          example: 1492d270-8ca6-4367-9d1b-edd2fbd7f81b
        offerRequired:
          type: boolean
          description: >-
            This element shall be included and set to true, if the session updates are received
            without SDP offer. This element indicates clients to send the offer.
          example: false
        reason:
          type: string
          description: The description of the event that has happened within the session
          example: 183 Progress
        sequenceNumber:
          type: integer
          description: The sequence number of the notification sent to client
          example: 345
    WrtcSDPDescriptor:
      type: object
      description: |-
        **OFFER**: An inlined session description in SDP format [RFC4566].If XML syntax
        is used, the content of this element SHALL be embedded in a CDATA
        section.

        **ANSWER**: This type represents an answer in WebRTC Signaling. This element is not
        present in case there is no answer yet, or the session invitation has
        been declined by the Terminating Participant.This element MUST NOT be
        present in a request from the application to the server to create a
        session.
      properties:
        sdp:
          type: string
          description: |-
            An inlined session description in SDP format [RFC4566].If XML syntax is used, the content of this element SHALL be embedded in a CDATA section
    SessionNotification:
      allOf:
        - $ref: '#/components/schemas/MediaSessionInformation'
      required:
        - status
        - mediaSessionId
    SessionStatus:
      type: string
      description: Provides the status of the media session. During the session creation, this attribute SHALL NOT be included in the request.
      enum:
        - Initial
        - InProgress
        - Ringing
        - Proceeding
        - Connected
        - Terminated
        - Hold
        - Resume
        - SessionCancelled
        - Declined
        - Failed
        - Waiting
        - NoAnswer
        - NotReachable
        - Busy
      example: Ringing
    ErrorInfo:
      type: object
      required:
        - message
        - status
        - code
      properties:
        message:
          type: string
          description: A human readable description of what the event represent
        status:
          type: integer
          description: HTTP response status code
        code:
          type: string
          description: Friendly Code to describe the error
    Address:
      type: string
      description: Subscriber address (Sender or Receiver)
      pattern: '^(tel:+[0-9]{5,15}|sip:.+@.+|.+)$'
      example: 'tel:+11234567899'
  examples:
    exampleMediaSessionRequest:
      value:
        originatorAddress: tel:+17085852753
        originatorName: tel:+17085852753
        receiverAddress: tel:+17085854000
        receiverName: tel:+17085854000
        offer:
          sdp: "v=0\r\no=- 8066321617929821805 2 IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\nm=audio 42988 RTP/SAVPF 102 113\r\nc=IN IP6 2001:e0:410:2448:7a05:9b11:66f2:c9e\r\nb=AS:64\r\na=rtcp:9 IN IP4 0.0.0.0\r\na=candidate:1645903805 1 udp 2122262783 2001:e0:410:2448:7a05:9b11:66f2:c9e 42988 typ host generation 0 network-id 3 network-cost 900\r\na=ice-ufrag:4eKp\r\na=ice-pwd:D4sF5Pv9vx9ggaqxBlHbAFMx\r\na=ice-options:trickle renomination\r\na=mid:audio\r\na=extmap:2 http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01\r\na=sendrecv\r\na=rtcp-mux\r\na=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:Xm3YciqVIWFNSwy19e9MvfZ2YOdAZil7oT/tHjdf\r\na=rtpmap:102 AMR-WB/16000\r\na=fmtp:102 octet-align=0; mode-set=0,1,2; mode-change-capability=2\r\na=rtpmap:113 telephone-event/16000\r\n"
        clientCorrelator: fda6e26d-e7c8-4596-870c-c083c0d39b2c
    exampleMediaSessionResponse:
      value:
        originatorAddress: 'tel:+17085852753'
        originatorName: 'tel:+17085852753'
        receiverAddress: 'tel:+17085854000'
        receiverName: 'tel:+17085854000'
        clientCorrelator: fda6e26d-e7c8-4596-870c-c083c0d39b2c
        offer:
          sdp: "v=0\r\no=- 8066321617929821805 2 IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\nm=audio 42988 RTP/SAVPF 102 113\r\nc=IN IP6 2001:e0:410:2448:7a05:9b11:66f2:c9e\r\nb=AS:64\r\na=rtcp:9 IN IP4 0.0.0.0\r\na=candidate:1645903805 1 udp 2122262783 2001:e0:410:2448:7a05:9b11:66f2:c9e 42988 typ host generation 0 network-id 3 network-cost 900\r\na=ice-ufrag:4eKp\r\na=ice-pwd:D4sF5Pv9vx9ggaqxBlHbAFMx\r\na=ice-options:trickle renomination\r\na=mid:audio\r\na=extmap:2 http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01\r\na=sendrecv\r\na=rtcp-mux\r\na=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:Xm3YciqVIWFNSwy19e9MvfZ2YOdAZil7oT/tHjdf\r\na=rtpmap:102 AMR-WB/16000\r\na=fmtp:102 octet-align=0; mode-set=0,1,2; mode-change-capability=2\r\na=rtpmap:113 telephone-event/16000\r\n"
        status: Initial
        mediaSessionId: 0AEE1B58BAEEDA3EABA42B32EBB3DFE0DEAD3F90AE0CEB9EEB0C0F703E199FC00E7C6E648F50EE885FF0CE6C7E1CEE795EDD
    exampleSessionStatus183InProgress:
      value:
        receiverSessionStatus:
          status: InProgress
          answer:
            sdp: >
              "v=0\r\no=- 8066321617929821805 2 IN IP4 127.0.0.1\r\ns=-\r\nt=0
              0\r\nm=

              audio 42988 RTP/SAVPF 102 113\r\nc=IN IP6
              2001:e0:410:2448:7a05:9b11:66f2

              :c9e\r\nb=AS:64\r\na=rtcp:9 IN IP4
              0.0.0.0\r\na=candidate:1645903805 1 udp

              2122262783 2001:e0:410:2448:7a05:9b11:66f2:c9e 42988 typhost
              generation 0

              network-id 3 network-cost
              900\r\na=ice-ufrag:4eKp\r\na=ice-pwd:D4sF5Pv9vx9

              ggaqxBlHbAFMx\r\na=ice-options:trickle
              renomination\r\na=mid:audio\r\na=

              extmap:2
              http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions

              -01\r\na=sendrecv\r\na=rtcp-mux\r\na=crypto:1
              AES_CM_128_HMAC_SHA1_80 inline:Xm

              3YciqVIWFNSwy19e9MvfZ2YOdAZil7oT/tHjdf\r\na=rtpmap:102
              AMR-WB/16000\r\na=fmtp:102

              octet-align=0; mode-set=0,1,2;
              mode-change-capability=2\r\na=rtpmap:113
              telephone-event/16000\r\n"
    exampleSessionStatus180Ringing:
      value:
        receiverSessionStatus:
          status: Ringing
    exampleSessionStatus200Connected:
      value:
        receiverSessionStatus:
          status: Connected
          answer:
            sdp: >
              "v=0\r\no=- 4576312012535546667 4 IN IP4 127.0.0.1\r\ns=-\r\nt=0
              0\r\nm=audio 47510 RTP/SAVPF 102 113\r\nc=IN

              IP6 2001:e0:410:243a:a344:cee7:7b39:bb1e\r\nb=AS:64\r\na=rtcp:9 IN
              IP4 0.0.0.0\r\na=candidate:3108871805 1 udp

              2122262783 2001:e0:410:243a:a344:cee7:7b39:bb1e 47510 typ host
              generation 0 network-id 3 network-cost 900\r\na=

              ice-ufrag:47Nx\r\na=ice-pwd:ln3CttOSkObcQ7A0tYO1LXqy\r\na=ice-options:trickle
              renomination\r\na=mid:audio\r\na=

              extmap:2
              http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01\r\na=sendrecv\r\na=rtcp-mux\r

              \na=crypto:1 AES_CM_128_HMAC_SHA1_80
              inline:ruAnBNYnTJqDVZAIJV59VpQ5DxGI6tMX9h9kkHSz\r\na=rtpmap:102
              AMR-WAB/16000

              \r\na=fmtp:102 octet-align=0; mode-set=0,1,2;
              mode-change-capability=2\r\na=rtpmap:113
              telephone-event/16000\r\na=

              ptime:20\r\n"
    exampleSessionStatusHold:
      value:
        ReceiverSessionStatus:
          status: Hold
          answer:
            sdp: "v=0\r\no=- 4576312012535546667 4 IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\nm=audio 47510 RTP/SAVPF 102 113\r\nc=IN IP6 2001:e0:410:243a:a344:cee7:7b39:bb1e\r\nb=AS:64\r\na=rtcp:9 IN IP4 0.0.0.0\r\na=candidate:3108871805 1 udp 2122262783 2001:e0:410:243a:a344:cee7:7b39:bb1e 47510 typ host generation 0 network-id 3 network-cost 900\r\na=ice-ufrag:47Nx\r\na=ice-pwd:ln3CttOSkObcQ7A0tYO1LXqy\r\na=ice-options:trickle renomination\r\na=mid:audio\r\na=extmap:2 http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01\r\na=sendrecv\r\na=rtcp-mux\r\na=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:ruAnBNYnTJqDVZAIJV59VpQ5DxGI6tMX9h9kkHSz\r\na=rtpmap:102 AMR-WB/16000\r\na=fmtp:102 octet-align=0; mode-set=0,1,2; mode-change-capability=2\r\na=rtpmap:113 telephone-event/16000\r\na=ptime:20\r\n"
    exampleSessionStatusResume:
      value:
        ReceiverSessionStatus:
          status: Resume
          answer:
            sdp: "v=0\r\no=- 4576312012535546667 4 IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\nm=audio 47510 RTP/SAVPF 102 113\r\nc=IN IP6 2001:e0:410:243a:a344:cee7:7b39:bb1e\r\nb=AS:64\r\na=rtcp:9 IN IP4 0.0.0.0\r\na=candidate:3108871805 1 udp 2122262783 2001:e0:410:243a:a344:cee7:7b39:bb1e 47510 typ host generation 0 network-id 3 network-cost 900\r\na=ice-ufrag:47Nx\r\na=ice-pwd:ln3CttOSkObcQ7A0tYO1LXqy\r\na=ice-options:trickle renomination\r\na=mid:audio\r\na=extmap:2 http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01\r\na=sendrecv\r\na=rtcp-mux\r\na=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:ruAnBNYnTJqDVZAIJV59VpQ5DxGI6tMX9h9kkHSz\r\na=rtpmap:102 AMR-WB/16000\r\na=fmtp:102 octet-align=0; mode-set=0,1,2; mode-change-capability=2\r\na=rtpmap:113 telephone-event/16000\r\na=ptime:20\r\n"
  responses:
    Generic400:
      description: Bad Request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 400
                  code:
                    enum:
                      - INVALID_ARGUMENT
                      - OUT_OF_RANGE
          examples:
            GENERIC_400_INVALID_ARGUMENT:
              description: Invalid Argument. Generic Syntax Exception
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: Client specified an invalid argument, request body or query param.
            GENERIC_400_OUT_OF_RANGE:
              description: Out of Range. Specific Syntax Exception used when a given field has a pre-defined range or a invalid filter criteria combination is requested
              value:
                status: 400
                code: OUT_OF_RANGE
                message: Client specified an invalid range.
    Generic401:
      description: Unauthorized
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 401
                  code:
                    enum:
                      - UNAUTHENTICATED
                      - AUTHENTICATION_REQUIRED
          examples:
            GENERIC_401_UNAUTHENTICATED:
              description: Request cannot be authenticated
              value:
                status: 401
                code: UNAUTHENTICATED
                message: Request not authenticated due to missing, invalid, or expired credentials.
            GENERIC_401_AUTHENTICATION_REQUIRED:
              description: New authentication is needed, authentication is no longer valid
              value:
                status: 401
                code: AUTHENTICATION_REQUIRED
                message: New authentication is required.
    Generic403:
      description: Forbidden
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 403
                  code:
                    enum:
                      - PERMISSION_DENIED
                      - INVALID_TOKEN_CONTEXT
          examples:
            GENERIC_403_PERMISSION_DENIED:
              description: Permission denied. OAuth2 token access does not have the required scope or when the user fails operational security
              value:
                status: 403
                code: PERMISSION_DENIED
                message: Client does not have sufficient permissions to perform this action.
            GENERIC_403_INVALID_TOKEN_CONTEXT:
              description: Reflect some inconsistency between information in some field of the API and the related OAuth2 Token
              value:
                status: 403
                code: INVALID_TOKEN_CONTEXT
                message: "originator info is not consistent with access token."
    Generic404:
      description: Not found
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 404
                  code:
                    enum:
                      - NOT_FOUND
                      - IDENTIFIER_NOT_FOUND
          examples:
            GENERIC_404_NOT_FOUND:
              description: Resource is not found
              value:
                status: 404
                code: NOT_FOUND
                message: The specified resource is not found.
            GENERIC_404_IDENTIFIER_NOT_FOUND:
              description: Some identifier cannot be matched to a device
              value:
                status: 404
                code: IDENTIFIER_NOT_FOUND
                message: Device identifier not found.
